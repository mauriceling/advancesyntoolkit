''' -------------------------------------
Python ODE script generated by ASModeller
(a package in AdvanceSynToolKit)

Date Time: 2025-10-31 3:52:52:669739

name: e_coli_core
author: e_coli_core
------------------------------------- '''

def m_adp_c(t, y):
    R1 = (13.7 * 1e-6 * y[23] * y[5])/(130e-6 + 1e-6 * y[23] * y[5])
    R4 = (13.7 * 1e-6 * y[10] * y[23])/(130e-6 + 1e-6 * y[10] * y[23])
    R12 = (13.7 * 1e-6 * y[20] * y[23])/(130e-6 + 1e-6 * y[20] * y[23])
    R16 = (13.7 * 1e-6 * y[23] * y[16])/(130e-6 + 1e-6 * y[23] * y[16])
    R17 = (13.7 * 1e-6 * y[23] * y[14])/(130e-6 + 1e-6 * y[23] * y[14])
    R20 = (13.7 * 1e-6 * y[21] * y[23])/(130e-6 + 1e-6 * y[21] * y[23])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R38 = (13.7 * 1e-6 * y[23] * y[24] * y[30])/(130e-6 + 1e-6 * y[23] * y[24] * y[30])
    R75 = (13.7 * 1e-6 * y[23] * y[49] * y[48])/(130e-6 + 1e-6 * y[23] * y[49] * y[48])
    R76 = (13.7 * 1e-6 * y[23] * y[66] * y[16])/(130e-6 + 1e-6 * y[23] * y[66] * y[16])
    R22 = (13.7 * 1e-6 * y[0] * y[31] * y[11])/(130e-6 + 1e-6 * y[0] * y[31] * y[11])
    R24 = (13.7 * 1e-6 * y[0] * y[2] * y[19])/(130e-6 + 1e-6 * y[0] * y[2] * y[19])
    return (R1 + R4 + R12 + R16 + R17 + R20 + R25 + R38 + R75 + R76) - (R22 + R24)
 
def m_fdp_c(t, y):
    R1 = (13.7 * 1e-6 * y[23] * y[5])/(130e-6 + 1e-6 * y[23] * y[5])
    R64 = (13.7 * 1e-6 * y[1])/(130e-6 + 1e-6 * y[1])
    R65 = (13.7 * 1e-6 * y[1] * y[16])/(130e-6 + 1e-6 * y[1] * y[16])
    return (R1) - (R64 + R65)
 
def m_h_c(t, y):
    R1 = (13.7 * 1e-6 * y[23] * y[5])/(130e-6 + 1e-6 * y[23] * y[5])
    R5 = (13.7 * 1e-6 * y[45] * y[16])/(130e-6 + 1e-6 * y[45] * y[16])
    R6 = (13.7 * 1e-6 * y[12] * y[24] * y[39])/(130e-6 + 1e-6 * y[12] * y[24] * y[39])
    R7 = (13.7 * 1e-6 * y[52] * y[31])/(130e-6 + 1e-6 * y[52] * y[31])
    R9 = (13.7 * 1e-6 * y[31] * y[54])/(130e-6 + 1e-6 * y[31] * y[54])
    R10 = (13.7 * 1e-6 * y[35] * y[39])/(130e-6 + 1e-6 * y[35] * y[39])
    R13 = (13.7 * 1e-6 * y[18] * y[16] * y[19])/(130e-6 + 1e-6 * y[18] * y[16] * y[19])
    R16 = (13.7 * 1e-6 * y[23] * y[16])/(130e-6 + 1e-6 * y[23] * y[16])
    R18 = (13.7 * 1e-6 * y[56] * y[31])/(130e-6 + 1e-6 * y[56] * y[31])
    R19 = (13.7 * 1e-6 * y[23] * y[16] * y[25])/(130e-6 + 1e-6 * y[23] * y[16] * y[25])
    R22 = (13.7 * 1e-6 * y[0] * y[31] * y[11])/(130e-6 + 1e-6 * y[0] * y[31] * y[11])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R26 = (13.7 * 1e-6 * y[31] * y[58])/(130e-6 + 1e-6 * y[31] * y[58])
    R29 = (13.7 * 1e-6 * y[3] * y[16] * y[14])/(130e-6 + 1e-6 * y[3] * y[16] * y[14])
    R31 = (13.7 * 1e-6 * y[31] * y[34])/(130e-6 + 1e-6 * y[31] * y[34])
    R33 = (13.7 * 1e-6 * y[31] * y[60])/(130e-6 + 1e-6 * y[31] * y[60])
    R35 = (13.7 * 1e-6 * y[31] * y[30])/(130e-6 + 1e-6 * y[31] * y[30])
    R36 = (13.7 * 1e-6 * y[61] * y[31])/(130e-6 + 1e-6 * y[61] * y[31])
    R40 = (13.7 * 1e-6 * y[31] * y[8] * y[26])/(130e-6 + 1e-6 * y[31] * y[8] * y[26])
    R66 = (13.7 * 1e-6 * y[62] * y[31])/(130e-6 + 1e-6 * y[62] * y[31])
    R71 = (13.7 * 1e-6 * y[64] * y[31])/(130e-6 + 1e-6 * y[64] * y[31])
    R72 = (13.7 * 1e-6 * y[46] * y[26])/(130e-6 + 1e-6 * y[46] * y[26])
    R73 = (13.7 * 1e-6 * y[41] * y[39] * y[11])/(130e-6 + 1e-6 * y[41] * y[39] * y[11])
    R75 = (13.7 * 1e-6 * y[23] * y[49] * y[48])/(130e-6 + 1e-6 * y[23] * y[49] * y[48])
    R76 = (13.7 * 1e-6 * y[23] * y[66] * y[16])/(130e-6 + 1e-6 * y[23] * y[66] * y[16])
    R77 = (13.7 * 1e-6 * y[49] * y[16] * y[26])/(130e-6 + 1e-6 * y[49] * y[16] * y[26])
    R80 = (13.7 * 1e-6 * y[67] * y[31])/(130e-6 + 1e-6 * y[67] * y[31])
    R85 = (13.7 * 1e-6 * y[33] * y[39])/(130e-6 + 1e-6 * y[33] * y[39])
    R86 = (13.7 * 1e-6 * y[3] * y[50] * y[16])/(130e-6 + 1e-6 * y[3] * y[50] * y[16])
    R87 = (13.7 * 1e-6 * y[31] * y[69])/(130e-6 + 1e-6 * y[31] * y[69])
    R88 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R24 = (13.7 * 1e-6 * y[0] * y[2] * y[19])/(130e-6 + 1e-6 * y[0] * y[2] * y[19])
    R32 = (13.7 * 1e-6 * y[2] * y[51] * y[37])/(130e-6 + 1e-6 * y[2] * y[51] * y[37])
    R79 = (13.7 * 1e-6 * y[9] * y[47] * y[2] * y[40])/(130e-6 + 1e-6 * y[9] * y[47] * y[2] * y[40])
    R91 = (13.7 * 1e-6 * y[2] * y[8] * y[32])/(130e-6 + 1e-6 * y[2] * y[8] * y[32])
    return (R1 + R5 + R6 + R7 + R9 + R10 + R13 + R16 + R18 + R19 + R22 + R25 + R26 + R29 + R31 + R33 + R35 + R36 + R40 + R66 + R71 + R72 + R73 + R75 + R76 + R77 + R80 + R85 + R86 + R87 + R88) - (R24 + R32 + R79 + R91)
 
def m_accoa_c(t, y):
    R2 = (13.7 * 1e-6 * y[24] * y[25])/(130e-6 + 1e-6 * y[24] * y[25])
    R6 = (13.7 * 1e-6 * y[12] * y[24] * y[39])/(130e-6 + 1e-6 * y[12] * y[24] * y[39])
    R95 = (13.7 * 1e-6 * y[24] * y[39] * y[25])/(130e-6 + 1e-6 * y[24] * y[39] * y[25])
    R23 = (13.7 * 1e-6 * y[3] * y[11])/(130e-6 + 1e-6 * y[3] * y[11])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R29 = (13.7 * 1e-6 * y[3] * y[16] * y[14])/(130e-6 + 1e-6 * y[3] * y[16] * y[14])
    R86 = (13.7 * 1e-6 * y[3] * y[50] * y[16])/(130e-6 + 1e-6 * y[3] * y[50] * y[16])
    return (R2 + R6 + R95) - (R23 + R25 + R29 + R86)
 
def m_for_c(t, y):
    R2 = (13.7 * 1e-6 * y[24] * y[25])/(130e-6 + 1e-6 * y[24] * y[25])
    R66 = (13.7 * 1e-6 * y[62] * y[31])/(130e-6 + 1e-6 * y[62] * y[31])
    R67 = (13.7 * 1e-6 * y[62])/(130e-6 + 1e-6 * y[62])
    return (R2 + R66 + R67) - (0)
 
def m_f6p_c(t, y):
    R3 = (13.7 * 1e-6 * y[46])/(130e-6 + 1e-6 * y[46])
    R39 = (13.7 * 1e-6 * y[41] * y[42])/(130e-6 + 1e-6 * y[41] * y[42])
    R42 = (13.7 * 1e-6 * y[38] * y[27])/(130e-6 + 1e-6 * y[38] * y[27])
    R65 = (13.7 * 1e-6 * y[1] * y[16])/(130e-6 + 1e-6 * y[1] * y[16])
    R69 = (13.7 * 1e-6 * y[63] * y[19])/(130e-6 + 1e-6 * y[63] * y[19])
    R1 = (13.7 * 1e-6 * y[23] * y[5])/(130e-6 + 1e-6 * y[23] * y[5])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    return (R3 + R39 + R42 + R65 + R69) - (R1 + R25)
 
def m_13dpg_c(t, y):
    R4 = (13.7 * 1e-6 * y[10] * y[23])/(130e-6 + 1e-6 * y[10] * y[23])
    R73 = (13.7 * 1e-6 * y[41] * y[39] * y[11])/(130e-6 + 1e-6 * y[41] * y[39] * y[11])
    return (R4 + R73) - (0)
 
def m_6pgc_c(t, y):
    R5 = (13.7 * 1e-6 * y[45] * y[16])/(130e-6 + 1e-6 * y[45] * y[16])
    R81 = (13.7 * 1e-6 * y[7] * y[26])/(130e-6 + 1e-6 * y[7] * y[26])
    return (R5) - (R81)
 
def m_nadh_c(t, y):
    R6 = (13.7 * 1e-6 * y[12] * y[24] * y[39])/(130e-6 + 1e-6 * y[12] * y[24] * y[39])
    R10 = (13.7 * 1e-6 * y[35] * y[39])/(130e-6 + 1e-6 * y[35] * y[39])
    R21 = (13.7 * 1e-6 * y[9] * y[24] * y[39])/(130e-6 + 1e-6 * y[9] * y[24] * y[39])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R73 = (13.7 * 1e-6 * y[41] * y[39] * y[11])/(130e-6 + 1e-6 * y[41] * y[39] * y[11])
    R85 = (13.7 * 1e-6 * y[33] * y[39])/(130e-6 + 1e-6 * y[33] * y[39])
    R88 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R89 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R92 = (13.7 * 1e-6 * y[39] * y[40])/(130e-6 + 1e-6 * y[39] * y[40])
    R95 = (13.7 * 1e-6 * y[24] * y[39] * y[25])/(130e-6 + 1e-6 * y[24] * y[39] * y[25])
    R40 = (13.7 * 1e-6 * y[31] * y[8] * y[26])/(130e-6 + 1e-6 * y[31] * y[8] * y[26])
    R91 = (13.7 * 1e-6 * y[2] * y[8] * y[32])/(130e-6 + 1e-6 * y[2] * y[8] * y[32])
    return (R6 + R10 + R21 + R25 + R73 + R85 + R88 + R89 + R92 + R95) - (R40 + R91)
 
def m_akg_c(t, y):
    R7 = (13.7 * 1e-6 * y[52] * y[31])/(130e-6 + 1e-6 * y[52] * y[31])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R77 = (13.7 * 1e-6 * y[49] * y[16] * y[26])/(130e-6 + 1e-6 * y[49] * y[16] * y[26])
    R83 = (13.7 * 1e-6 * y[17] * y[26])/(130e-6 + 1e-6 * y[17] * y[26])
    R21 = (13.7 * 1e-6 * y[9] * y[24] * y[39])/(130e-6 + 1e-6 * y[9] * y[24] * y[39])
    R79 = (13.7 * 1e-6 * y[9] * y[47] * y[2] * y[40])/(130e-6 + 1e-6 * y[9] * y[47] * y[2] * y[40])
    return (R7 + R25 + R77 + R83) - (R21 + R79)
 
def m_3pg_c(t, y):
    R8 = (13.7 * 1e-6 * y[53])/(130e-6 + 1e-6 * y[53])
    R4 = (13.7 * 1e-6 * y[10] * y[23])/(130e-6 + 1e-6 * y[10] * y[23])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    return (R8) - (R4 + R25)
 
def m_pi_c(t, y):
    R9 = (13.7 * 1e-6 * y[31] * y[54])/(130e-6 + 1e-6 * y[31] * y[54])
    R13 = (13.7 * 1e-6 * y[18] * y[16] * y[19])/(130e-6 + 1e-6 * y[18] * y[16] * y[19])
    R16 = (13.7 * 1e-6 * y[23] * y[16])/(130e-6 + 1e-6 * y[23] * y[16])
    R19 = (13.7 * 1e-6 * y[23] * y[16] * y[25])/(130e-6 + 1e-6 * y[23] * y[16] * y[25])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R38 = (13.7 * 1e-6 * y[23] * y[24] * y[30])/(130e-6 + 1e-6 * y[23] * y[24] * y[30])
    R65 = (13.7 * 1e-6 * y[1] * y[16])/(130e-6 + 1e-6 * y[1] * y[16])
    R75 = (13.7 * 1e-6 * y[23] * y[49] * y[48])/(130e-6 + 1e-6 * y[23] * y[49] * y[48])
    R76 = (13.7 * 1e-6 * y[23] * y[66] * y[16])/(130e-6 + 1e-6 * y[23] * y[66] * y[16])
    R22 = (13.7 * 1e-6 * y[0] * y[31] * y[11])/(130e-6 + 1e-6 * y[0] * y[31] * y[11])
    R23 = (13.7 * 1e-6 * y[3] * y[11])/(130e-6 + 1e-6 * y[3] * y[11])
    R73 = (13.7 * 1e-6 * y[41] * y[39] * y[11])/(130e-6 + 1e-6 * y[41] * y[39] * y[11])
    return (R9 + R13 + R16 + R19 + R25 + R38 + R65 + R75 + R76) - (R22 + R23 + R73)
 
def m_acald_c(t, y):
    R10 = (13.7 * 1e-6 * y[35] * y[39])/(130e-6 + 1e-6 * y[35] * y[39])
    R11 = (13.7 * 1e-6 * y[55])/(130e-6 + 1e-6 * y[55])
    R6 = (13.7 * 1e-6 * y[12] * y[24] * y[39])/(130e-6 + 1e-6 * y[12] * y[24] * y[39])
    return (R10 + R11) - (R6)
 
def m_actp_c(t, y):
    R12 = (13.7 * 1e-6 * y[20] * y[23])/(130e-6 + 1e-6 * y[20] * y[23])
    R23 = (13.7 * 1e-6 * y[3] * y[11])/(130e-6 + 1e-6 * y[3] * y[11])
    return (R12 + R23) - (0)
 
def m_oaa_c(t, y):
    R13 = (13.7 * 1e-6 * y[18] * y[16] * y[19])/(130e-6 + 1e-6 * y[18] * y[16] * y[19])
    R88 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R17 = (13.7 * 1e-6 * y[23] * y[14])/(130e-6 + 1e-6 * y[23] * y[14])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R29 = (13.7 * 1e-6 * y[3] * y[16] * y[14])/(130e-6 + 1e-6 * y[3] * y[16] * y[14])
    return (R13 + R88) - (R17 + R25 + R29)
 
def m_acon_C_c(t, y):
    R14 = (13.7 * 1e-6 * y[28])/(130e-6 + 1e-6 * y[28])
    R15 = (13.7 * 1e-6 * y[15] * y[16])/(130e-6 + 1e-6 * y[15] * y[16])
    return (R14) - (R15)
 
def m_h2o_c(t, y):
    R14 = (13.7 * 1e-6 * y[28])/(130e-6 + 1e-6 * y[28])
    R22 = (13.7 * 1e-6 * y[0] * y[31] * y[11])/(130e-6 + 1e-6 * y[0] * y[31] * y[11])
    R32 = (13.7 * 1e-6 * y[2] * y[51] * y[37])/(130e-6 + 1e-6 * y[2] * y[51] * y[37])
    R34 = (13.7 * 1e-6 * y[53])/(130e-6 + 1e-6 * y[53])
    R82 = (13.7 * 1e-6 * y[68])/(130e-6 + 1e-6 * y[68])
    R5 = (13.7 * 1e-6 * y[45] * y[16])/(130e-6 + 1e-6 * y[45] * y[16])
    R13 = (13.7 * 1e-6 * y[18] * y[16] * y[19])/(130e-6 + 1e-6 * y[18] * y[16] * y[19])
    R15 = (13.7 * 1e-6 * y[15] * y[16])/(130e-6 + 1e-6 * y[15] * y[16])
    R16 = (13.7 * 1e-6 * y[23] * y[16])/(130e-6 + 1e-6 * y[23] * y[16])
    R19 = (13.7 * 1e-6 * y[23] * y[16] * y[25])/(130e-6 + 1e-6 * y[23] * y[16] * y[25])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R29 = (13.7 * 1e-6 * y[3] * y[16] * y[14])/(130e-6 + 1e-6 * y[3] * y[16] * y[14])
    R65 = (13.7 * 1e-6 * y[1] * y[16])/(130e-6 + 1e-6 * y[1] * y[16])
    R70 = (13.7 * 1e-6 * y[36] * y[16])/(130e-6 + 1e-6 * y[36] * y[16])
    R76 = (13.7 * 1e-6 * y[23] * y[66] * y[16])/(130e-6 + 1e-6 * y[23] * y[66] * y[16])
    R77 = (13.7 * 1e-6 * y[49] * y[16] * y[26])/(130e-6 + 1e-6 * y[49] * y[16] * y[26])
    R78 = (13.7 * 1e-6 * y[47] * y[16])/(130e-6 + 1e-6 * y[47] * y[16])
    R86 = (13.7 * 1e-6 * y[3] * y[50] * y[16])/(130e-6 + 1e-6 * y[3] * y[50] * y[16])
    return (R14 + R22 + R32 + R34 + R82) - (R5 + R13 + R15 + R16 + R19 + R25 + R29 + R65 + R70 + R76 + R77 + R78 + R86)
 
def m_icit_c(t, y):
    R15 = (13.7 * 1e-6 * y[15] * y[16])/(130e-6 + 1e-6 * y[15] * y[16])
    R83 = (13.7 * 1e-6 * y[17] * y[26])/(130e-6 + 1e-6 * y[17] * y[26])
    R84 = (13.7 * 1e-6 * y[17])/(130e-6 + 1e-6 * y[17])
    return (R15) - (R83 + R84)
 
def m_co2_c(t, y):
    R17 = (13.7 * 1e-6 * y[23] * y[14])/(130e-6 + 1e-6 * y[23] * y[14])
    R21 = (13.7 * 1e-6 * y[9] * y[24] * y[39])/(130e-6 + 1e-6 * y[9] * y[24] * y[39])
    R27 = (13.7 * 1e-6 * y[59])/(130e-6 + 1e-6 * y[59])
    R81 = (13.7 * 1e-6 * y[7] * y[26])/(130e-6 + 1e-6 * y[7] * y[26])
    R83 = (13.7 * 1e-6 * y[17] * y[26])/(130e-6 + 1e-6 * y[17] * y[26])
    R89 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R90 = (13.7 * 1e-6 * y[44] * y[26])/(130e-6 + 1e-6 * y[44] * y[26])
    R95 = (13.7 * 1e-6 * y[24] * y[39] * y[25])/(130e-6 + 1e-6 * y[24] * y[39] * y[25])
    R13 = (13.7 * 1e-6 * y[18] * y[16] * y[19])/(130e-6 + 1e-6 * y[18] * y[16] * y[19])
    return (R17 + R21 + R27 + R81 + R83 + R89 + R90 + R95) - (R13)
 
def m_pep_c(t, y):
    R17 = (13.7 * 1e-6 * y[23] * y[14])/(130e-6 + 1e-6 * y[23] * y[14])
    R19 = (13.7 * 1e-6 * y[23] * y[16] * y[25])/(130e-6 + 1e-6 * y[23] * y[16] * y[25])
    R34 = (13.7 * 1e-6 * y[53])/(130e-6 + 1e-6 * y[53])
    R13 = (13.7 * 1e-6 * y[18] * y[16] * y[19])/(130e-6 + 1e-6 * y[18] * y[16] * y[19])
    R24 = (13.7 * 1e-6 * y[0] * y[2] * y[19])/(130e-6 + 1e-6 * y[0] * y[2] * y[19])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R69 = (13.7 * 1e-6 * y[63] * y[19])/(130e-6 + 1e-6 * y[63] * y[19])
    R74 = (13.7 * 1e-6 * y[65] * y[19])/(130e-6 + 1e-6 * y[65] * y[19])
    return (R17 + R19 + R34) - (R13 + R24 + R25 + R69 + R74)
 
def m_ac_c(t, y):
    R18 = (13.7 * 1e-6 * y[56] * y[31])/(130e-6 + 1e-6 * y[56] * y[31])
    R12 = (13.7 * 1e-6 * y[20] * y[23])/(130e-6 + 1e-6 * y[20] * y[23])
    return (R18) - (R12)
 
def m_amp_c(t, y):
    R19 = (13.7 * 1e-6 * y[23] * y[16] * y[25])/(130e-6 + 1e-6 * y[23] * y[16] * y[25])
    R20 = (13.7 * 1e-6 * y[21] * y[23])/(130e-6 + 1e-6 * y[21] * y[23])
    return (R19) - (R20)
 
def m_succoa_c(t, y):
    R21 = (13.7 * 1e-6 * y[9] * y[24] * y[39])/(130e-6 + 1e-6 * y[9] * y[24] * y[39])
    R38 = (13.7 * 1e-6 * y[23] * y[24] * y[30])/(130e-6 + 1e-6 * y[23] * y[24] * y[30])
    return (R21 + R38) - (0)
 
def m_atp_c(t, y):
    R22 = (13.7 * 1e-6 * y[0] * y[31] * y[11])/(130e-6 + 1e-6 * y[0] * y[31] * y[11])
    R24 = (13.7 * 1e-6 * y[0] * y[2] * y[19])/(130e-6 + 1e-6 * y[0] * y[2] * y[19])
    R1 = (13.7 * 1e-6 * y[23] * y[5])/(130e-6 + 1e-6 * y[23] * y[5])
    R4 = (13.7 * 1e-6 * y[10] * y[23])/(130e-6 + 1e-6 * y[10] * y[23])
    R12 = (13.7 * 1e-6 * y[20] * y[23])/(130e-6 + 1e-6 * y[20] * y[23])
    R16 = (13.7 * 1e-6 * y[23] * y[16])/(130e-6 + 1e-6 * y[23] * y[16])
    R17 = (13.7 * 1e-6 * y[23] * y[14])/(130e-6 + 1e-6 * y[23] * y[14])
    R19 = (13.7 * 1e-6 * y[23] * y[16] * y[25])/(130e-6 + 1e-6 * y[23] * y[16] * y[25])
    R20 = (13.7 * 1e-6 * y[21] * y[23])/(130e-6 + 1e-6 * y[21] * y[23])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R38 = (13.7 * 1e-6 * y[23] * y[24] * y[30])/(130e-6 + 1e-6 * y[23] * y[24] * y[30])
    R75 = (13.7 * 1e-6 * y[23] * y[49] * y[48])/(130e-6 + 1e-6 * y[23] * y[49] * y[48])
    R76 = (13.7 * 1e-6 * y[23] * y[66] * y[16])/(130e-6 + 1e-6 * y[23] * y[66] * y[16])
    return (R22 + R24) - (R1 + R4 + R12 + R16 + R17 + R19 + R20 + R25 + R38 + R75 + R76)
 
def m_coa_c(t, y):
    R23 = (13.7 * 1e-6 * y[3] * y[11])/(130e-6 + 1e-6 * y[3] * y[11])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R29 = (13.7 * 1e-6 * y[3] * y[16] * y[14])/(130e-6 + 1e-6 * y[3] * y[16] * y[14])
    R86 = (13.7 * 1e-6 * y[3] * y[50] * y[16])/(130e-6 + 1e-6 * y[3] * y[50] * y[16])
    R2 = (13.7 * 1e-6 * y[24] * y[25])/(130e-6 + 1e-6 * y[24] * y[25])
    R6 = (13.7 * 1e-6 * y[12] * y[24] * y[39])/(130e-6 + 1e-6 * y[12] * y[24] * y[39])
    R21 = (13.7 * 1e-6 * y[9] * y[24] * y[39])/(130e-6 + 1e-6 * y[9] * y[24] * y[39])
    R38 = (13.7 * 1e-6 * y[23] * y[24] * y[30])/(130e-6 + 1e-6 * y[23] * y[24] * y[30])
    R95 = (13.7 * 1e-6 * y[24] * y[39] * y[25])/(130e-6 + 1e-6 * y[24] * y[39] * y[25])
    return (R23 + R25 + R29 + R86) - (R2 + R6 + R21 + R38 + R95)
 
def m_pyr_c(t, y):
    R24 = (13.7 * 1e-6 * y[0] * y[2] * y[19])/(130e-6 + 1e-6 * y[0] * y[2] * y[19])
    R26 = (13.7 * 1e-6 * y[31] * y[58])/(130e-6 + 1e-6 * y[31] * y[58])
    R69 = (13.7 * 1e-6 * y[63] * y[19])/(130e-6 + 1e-6 * y[63] * y[19])
    R74 = (13.7 * 1e-6 * y[65] * y[19])/(130e-6 + 1e-6 * y[65] * y[19])
    R85 = (13.7 * 1e-6 * y[33] * y[39])/(130e-6 + 1e-6 * y[33] * y[39])
    R89 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R90 = (13.7 * 1e-6 * y[44] * y[26])/(130e-6 + 1e-6 * y[44] * y[26])
    R2 = (13.7 * 1e-6 * y[24] * y[25])/(130e-6 + 1e-6 * y[24] * y[25])
    R19 = (13.7 * 1e-6 * y[23] * y[16] * y[25])/(130e-6 + 1e-6 * y[23] * y[16] * y[25])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R95 = (13.7 * 1e-6 * y[24] * y[39] * y[25])/(130e-6 + 1e-6 * y[24] * y[39] * y[25])
    return (R24 + R26 + R69 + R74 + R85 + R89 + R90) - (R2 + R19 + R25 + R95)
 
def m_nadp_c(t, y):
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R79 = (13.7 * 1e-6 * y[9] * y[47] * y[2] * y[40])/(130e-6 + 1e-6 * y[9] * y[47] * y[2] * y[40])
    R92 = (13.7 * 1e-6 * y[39] * y[40])/(130e-6 + 1e-6 * y[39] * y[40])
    R40 = (13.7 * 1e-6 * y[31] * y[8] * y[26])/(130e-6 + 1e-6 * y[31] * y[8] * y[26])
    R72 = (13.7 * 1e-6 * y[46] * y[26])/(130e-6 + 1e-6 * y[46] * y[26])
    R77 = (13.7 * 1e-6 * y[49] * y[16] * y[26])/(130e-6 + 1e-6 * y[49] * y[16] * y[26])
    R81 = (13.7 * 1e-6 * y[7] * y[26])/(130e-6 + 1e-6 * y[7] * y[26])
    R83 = (13.7 * 1e-6 * y[17] * y[26])/(130e-6 + 1e-6 * y[17] * y[26])
    R90 = (13.7 * 1e-6 * y[44] * y[26])/(130e-6 + 1e-6 * y[44] * y[26])
    return (R25 + R79 + R92) - (R40 + R72 + R77 + R81 + R83 + R90)
 
def m_xu5p__D_c(t, y):
    R28 = (13.7 * 1e-6 * y[29])/(130e-6 + 1e-6 * y[29])
    R41 = (13.7 * 1e-6 * y[57] * y[27])/(130e-6 + 1e-6 * y[57] * y[27])
    R42 = (13.7 * 1e-6 * y[38] * y[27])/(130e-6 + 1e-6 * y[38] * y[27])
    return (R28) - (R41 + R42)
 
def m_cit_c(t, y):
    R29 = (13.7 * 1e-6 * y[3] * y[16] * y[14])/(130e-6 + 1e-6 * y[3] * y[16] * y[14])
    R14 = (13.7 * 1e-6 * y[28])/(130e-6 + 1e-6 * y[28])
    return (R29) - (R14)
 
def m_ru5p__D_c(t, y):
    R30 = (13.7 * 1e-6 * y[57])/(130e-6 + 1e-6 * y[57])
    R81 = (13.7 * 1e-6 * y[7] * y[26])/(130e-6 + 1e-6 * y[7] * y[26])
    R28 = (13.7 * 1e-6 * y[29])/(130e-6 + 1e-6 * y[29])
    return (R30 + R81) - (R28)
 
def m_succ_c(t, y):
    R31 = (13.7 * 1e-6 * y[31] * y[34])/(130e-6 + 1e-6 * y[31] * y[34])
    R68 = (13.7 * 1e-6 * y[36] * y[37])/(130e-6 + 1e-6 * y[36] * y[37])
    R84 = (13.7 * 1e-6 * y[17])/(130e-6 + 1e-6 * y[17])
    R35 = (13.7 * 1e-6 * y[31] * y[30])/(130e-6 + 1e-6 * y[31] * y[30])
    R37 = (13.7 * 1e-6 * y[32] * y[30])/(130e-6 + 1e-6 * y[32] * y[30])
    R38 = (13.7 * 1e-6 * y[23] * y[24] * y[30])/(130e-6 + 1e-6 * y[23] * y[24] * y[30])
    return (R31 + R68 + R84) - (R35 + R37 + R38)
 
def m_h_e(t, y):
    R32 = (13.7 * 1e-6 * y[2] * y[51] * y[37])/(130e-6 + 1e-6 * y[2] * y[51] * y[37])
    R91 = (13.7 * 1e-6 * y[2] * y[8] * y[32])/(130e-6 + 1e-6 * y[2] * y[8] * y[32])
    R7 = (13.7 * 1e-6 * y[52] * y[31])/(130e-6 + 1e-6 * y[52] * y[31])
    R9 = (13.7 * 1e-6 * y[31] * y[54])/(130e-6 + 1e-6 * y[31] * y[54])
    R18 = (13.7 * 1e-6 * y[56] * y[31])/(130e-6 + 1e-6 * y[56] * y[31])
    R22 = (13.7 * 1e-6 * y[0] * y[31] * y[11])/(130e-6 + 1e-6 * y[0] * y[31] * y[11])
    R26 = (13.7 * 1e-6 * y[31] * y[58])/(130e-6 + 1e-6 * y[31] * y[58])
    R31 = (13.7 * 1e-6 * y[31] * y[34])/(130e-6 + 1e-6 * y[31] * y[34])
    R33 = (13.7 * 1e-6 * y[31] * y[60])/(130e-6 + 1e-6 * y[31] * y[60])
    R35 = (13.7 * 1e-6 * y[31] * y[30])/(130e-6 + 1e-6 * y[31] * y[30])
    R36 = (13.7 * 1e-6 * y[61] * y[31])/(130e-6 + 1e-6 * y[61] * y[31])
    R40 = (13.7 * 1e-6 * y[31] * y[8] * y[26])/(130e-6 + 1e-6 * y[31] * y[8] * y[26])
    R55 = (13.7 * 1000.0 * y[31])/(130e-6 + 1000.0 * y[31])
    R66 = (13.7 * 1e-6 * y[62] * y[31])/(130e-6 + 1e-6 * y[62] * y[31])
    R71 = (13.7 * 1e-6 * y[64] * y[31])/(130e-6 + 1e-6 * y[64] * y[31])
    R80 = (13.7 * 1e-6 * y[67] * y[31])/(130e-6 + 1e-6 * y[67] * y[31])
    R87 = (13.7 * 1e-6 * y[31] * y[69])/(130e-6 + 1e-6 * y[31] * y[69])
    return (R32 + R91) - (R7 + R9 + R18 + R22 + R26 + R31 + R33 + R35 + R36 + R40 + R55 + R66 + R71 + R80 + R87)
 
def m_q8_c(t, y):
    R32 = (13.7 * 1e-6 * y[2] * y[51] * y[37])/(130e-6 + 1e-6 * y[2] * y[51] * y[37])
    R68 = (13.7 * 1e-6 * y[36] * y[37])/(130e-6 + 1e-6 * y[36] * y[37])
    R37 = (13.7 * 1e-6 * y[32] * y[30])/(130e-6 + 1e-6 * y[32] * y[30])
    R91 = (13.7 * 1e-6 * y[2] * y[8] * y[32])/(130e-6 + 1e-6 * y[2] * y[8] * y[32])
    return (R32 + R68) - (R37 + R91)
 
def m_lac__D_c(t, y):
    R33 = (13.7 * 1e-6 * y[31] * y[60])/(130e-6 + 1e-6 * y[31] * y[60])
    R85 = (13.7 * 1e-6 * y[33] * y[39])/(130e-6 + 1e-6 * y[33] * y[39])
    return (R33) - (R85)
 
def m_succ_e(t, y):
    R35 = (13.7 * 1e-6 * y[31] * y[30])/(130e-6 + 1e-6 * y[31] * y[30])
    R31 = (13.7 * 1e-6 * y[31] * y[34])/(130e-6 + 1e-6 * y[31] * y[34])
    R63 = (13.7 * 1e-6 * y[34])/(130e-6 + 1e-6 * y[34])
    return (R35) - (R31 + R63)
 
def m_etoh_c(t, y):
    R36 = (13.7 * 1e-6 * y[61] * y[31])/(130e-6 + 1e-6 * y[61] * y[31])
    R10 = (13.7 * 1e-6 * y[35] * y[39])/(130e-6 + 1e-6 * y[35] * y[39])
    return (R36) - (R10)
 
def m_fum_c(t, y):
    R37 = (13.7 * 1e-6 * y[32] * y[30])/(130e-6 + 1e-6 * y[32] * y[30])
    R71 = (13.7 * 1e-6 * y[64] * y[31])/(130e-6 + 1e-6 * y[64] * y[31])
    R68 = (13.7 * 1e-6 * y[36] * y[37])/(130e-6 + 1e-6 * y[36] * y[37])
    R70 = (13.7 * 1e-6 * y[36] * y[16])/(130e-6 + 1e-6 * y[36] * y[16])
    return (R37 + R71) - (R68 + R70)
 
def m_q8h2_c(t, y):
    R37 = (13.7 * 1e-6 * y[32] * y[30])/(130e-6 + 1e-6 * y[32] * y[30])
    R91 = (13.7 * 1e-6 * y[2] * y[8] * y[32])/(130e-6 + 1e-6 * y[2] * y[8] * y[32])
    R32 = (13.7 * 1e-6 * y[2] * y[51] * y[37])/(130e-6 + 1e-6 * y[2] * y[51] * y[37])
    R68 = (13.7 * 1e-6 * y[36] * y[37])/(130e-6 + 1e-6 * y[36] * y[37])
    return (R37 + R91) - (R32 + R68)
 
def m_e4p_c(t, y):
    R39 = (13.7 * 1e-6 * y[41] * y[42])/(130e-6 + 1e-6 * y[41] * y[42])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R42 = (13.7 * 1e-6 * y[38] * y[27])/(130e-6 + 1e-6 * y[38] * y[27])
    return (R39) - (R25 + R42)
 
def m_nad_c(t, y):
    R40 = (13.7 * 1e-6 * y[31] * y[8] * y[26])/(130e-6 + 1e-6 * y[31] * y[8] * y[26])
    R91 = (13.7 * 1e-6 * y[2] * y[8] * y[32])/(130e-6 + 1e-6 * y[2] * y[8] * y[32])
    R6 = (13.7 * 1e-6 * y[12] * y[24] * y[39])/(130e-6 + 1e-6 * y[12] * y[24] * y[39])
    R10 = (13.7 * 1e-6 * y[35] * y[39])/(130e-6 + 1e-6 * y[35] * y[39])
    R21 = (13.7 * 1e-6 * y[9] * y[24] * y[39])/(130e-6 + 1e-6 * y[9] * y[24] * y[39])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R73 = (13.7 * 1e-6 * y[41] * y[39] * y[11])/(130e-6 + 1e-6 * y[41] * y[39] * y[11])
    R85 = (13.7 * 1e-6 * y[33] * y[39])/(130e-6 + 1e-6 * y[33] * y[39])
    R88 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R89 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R92 = (13.7 * 1e-6 * y[39] * y[40])/(130e-6 + 1e-6 * y[39] * y[40])
    R95 = (13.7 * 1e-6 * y[24] * y[39] * y[25])/(130e-6 + 1e-6 * y[24] * y[39] * y[25])
    return (R40 + R91) - (R6 + R10 + R21 + R25 + R73 + R85 + R88 + R89 + R92 + R95)
 
def m_nadph_c(t, y):
    R40 = (13.7 * 1e-6 * y[31] * y[8] * y[26])/(130e-6 + 1e-6 * y[31] * y[8] * y[26])
    R72 = (13.7 * 1e-6 * y[46] * y[26])/(130e-6 + 1e-6 * y[46] * y[26])
    R77 = (13.7 * 1e-6 * y[49] * y[16] * y[26])/(130e-6 + 1e-6 * y[49] * y[16] * y[26])
    R81 = (13.7 * 1e-6 * y[7] * y[26])/(130e-6 + 1e-6 * y[7] * y[26])
    R83 = (13.7 * 1e-6 * y[17] * y[26])/(130e-6 + 1e-6 * y[17] * y[26])
    R90 = (13.7 * 1e-6 * y[44] * y[26])/(130e-6 + 1e-6 * y[44] * y[26])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R79 = (13.7 * 1e-6 * y[9] * y[47] * y[2] * y[40])/(130e-6 + 1e-6 * y[9] * y[47] * y[2] * y[40])
    R92 = (13.7 * 1e-6 * y[39] * y[40])/(130e-6 + 1e-6 * y[39] * y[40])
    return (R40 + R72 + R77 + R81 + R83 + R90) - (R25 + R79 + R92)
 
def m_g3p_c(t, y):
    R41 = (13.7 * 1e-6 * y[57] * y[27])/(130e-6 + 1e-6 * y[57] * y[27])
    R42 = (13.7 * 1e-6 * y[38] * y[27])/(130e-6 + 1e-6 * y[38] * y[27])
    R43 = (13.7 * 1e-6 * y[43])/(130e-6 + 1e-6 * y[43])
    R64 = (13.7 * 1e-6 * y[1])/(130e-6 + 1e-6 * y[1])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R39 = (13.7 * 1e-6 * y[41] * y[42])/(130e-6 + 1e-6 * y[41] * y[42])
    R73 = (13.7 * 1e-6 * y[41] * y[39] * y[11])/(130e-6 + 1e-6 * y[41] * y[39] * y[11])
    return (R41 + R42 + R43 + R64) - (R25 + R39 + R73)
 
def m_s7p_c(t, y):
    R41 = (13.7 * 1e-6 * y[57] * y[27])/(130e-6 + 1e-6 * y[57] * y[27])
    R39 = (13.7 * 1e-6 * y[41] * y[42])/(130e-6 + 1e-6 * y[41] * y[42])
    return (R41) - (R39)
 
def m_dhap_c(t, y):
    R64 = (13.7 * 1e-6 * y[1])/(130e-6 + 1e-6 * y[1])
    R43 = (13.7 * 1e-6 * y[43])/(130e-6 + 1e-6 * y[43])
    return (R64) - (R43)
 
def m_mal__L_c(t, y):
    R70 = (13.7 * 1e-6 * y[36] * y[16])/(130e-6 + 1e-6 * y[36] * y[16])
    R86 = (13.7 * 1e-6 * y[3] * y[50] * y[16])/(130e-6 + 1e-6 * y[3] * y[50] * y[16])
    R87 = (13.7 * 1e-6 * y[31] * y[69])/(130e-6 + 1e-6 * y[31] * y[69])
    R88 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R89 = (13.7 * 1e-6 * y[44] * y[39])/(130e-6 + 1e-6 * y[44] * y[39])
    R90 = (13.7 * 1e-6 * y[44] * y[26])/(130e-6 + 1e-6 * y[44] * y[26])
    return (R70 + R86 + R87) - (R88 + R89 + R90)
 
def m_6pgl_c(t, y):
    R72 = (13.7 * 1e-6 * y[46] * y[26])/(130e-6 + 1e-6 * y[46] * y[26])
    R5 = (13.7 * 1e-6 * y[45] * y[16])/(130e-6 + 1e-6 * y[45] * y[16])
    return (R72) - (R5)
 
def m_g6p_c(t, y):
    R74 = (13.7 * 1e-6 * y[65] * y[19])/(130e-6 + 1e-6 * y[65] * y[19])
    R3 = (13.7 * 1e-6 * y[46])/(130e-6 + 1e-6 * y[46])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R72 = (13.7 * 1e-6 * y[46] * y[26])/(130e-6 + 1e-6 * y[46] * y[26])
    return (R74) - (R3 + R25 + R72)
 
def m_gln__L_c(t, y):
    R75 = (13.7 * 1e-6 * y[23] * y[49] * y[48])/(130e-6 + 1e-6 * y[23] * y[49] * y[48])
    R76 = (13.7 * 1e-6 * y[23] * y[66] * y[16])/(130e-6 + 1e-6 * y[23] * y[66] * y[16])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R78 = (13.7 * 1e-6 * y[47] * y[16])/(130e-6 + 1e-6 * y[47] * y[16])
    R79 = (13.7 * 1e-6 * y[9] * y[47] * y[2] * y[40])/(130e-6 + 1e-6 * y[9] * y[47] * y[2] * y[40])
    return (R75 + R76) - (R25 + R78 + R79)
 
def m_nh4_c(t, y):
    R77 = (13.7 * 1e-6 * y[49] * y[16] * y[26])/(130e-6 + 1e-6 * y[49] * y[16] * y[26])
    R78 = (13.7 * 1e-6 * y[47] * y[16])/(130e-6 + 1e-6 * y[47] * y[16])
    R93 = (13.7 * 1e-6 * y[70])/(130e-6 + 1e-6 * y[70])
    R75 = (13.7 * 1e-6 * y[23] * y[49] * y[48])/(130e-6 + 1e-6 * y[23] * y[49] * y[48])
    return (R77 + R78 + R93) - (R75)
 
def m_glu__L_c(t, y):
    R78 = (13.7 * 1e-6 * y[47] * y[16])/(130e-6 + 1e-6 * y[47] * y[16])
    R79 = (13.7 * 1e-6 * y[9] * y[47] * y[2] * y[40])/(130e-6 + 1e-6 * y[9] * y[47] * y[2] * y[40])
    R80 = (13.7 * 1e-6 * y[67] * y[31])/(130e-6 + 1e-6 * y[67] * y[31])
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R75 = (13.7 * 1e-6 * y[23] * y[49] * y[48])/(130e-6 + 1e-6 * y[23] * y[49] * y[48])
    R77 = (13.7 * 1e-6 * y[49] * y[16] * y[26])/(130e-6 + 1e-6 * y[49] * y[16] * y[26])
    return (R78 + R79 + R80) - (R25 + R75 + R77)
 
def m_glx_c(t, y):
    R84 = (13.7 * 1e-6 * y[17])/(130e-6 + 1e-6 * y[17])
    R86 = (13.7 * 1e-6 * y[3] * y[50] * y[16])/(130e-6 + 1e-6 * y[3] * y[50] * y[16])
    return (R84) - (R86)
 
def m_o2_c(t, y):
    R94 = (13.7 * 1e-6 * y[71])/(130e-6 + 1e-6 * y[71])
    R32 = (13.7 * 1e-6 * y[2] * y[51] * y[37])/(130e-6 + 1e-6 * y[2] * y[51] * y[37])
    return (R94) - (R32)
 
def m_akg_e(t, y):
    R7 = (13.7 * 1e-6 * y[52] * y[31])/(130e-6 + 1e-6 * y[52] * y[31])
    R46 = (13.7 * 1e-6 * y[52])/(130e-6 + 1e-6 * y[52])
    return (0) - (R7 + R46)
 
def m_2pg_c(t, y):
    R8 = (13.7 * 1e-6 * y[53])/(130e-6 + 1e-6 * y[53])
    R34 = (13.7 * 1e-6 * y[53])/(130e-6 + 1e-6 * y[53])
    return (0) - (R8 + R34)
 
def m_pi_e(t, y):
    R9 = (13.7 * 1e-6 * y[31] * y[54])/(130e-6 + 1e-6 * y[31] * y[54])
    R61 = (13.7 * 1000.0 * y[54])/(130e-6 + 1000.0 * y[54])
    return (0) - (R9 + R61)
 
def m_acald_e(t, y):
    R11 = (13.7 * 1e-6 * y[55])/(130e-6 + 1e-6 * y[55])
    R45 = (13.7 * 1e-6 * y[55])/(130e-6 + 1e-6 * y[55])
    return (0) - (R11 + R45)
 
def m_ac_e(t, y):
    R18 = (13.7 * 1e-6 * y[56] * y[31])/(130e-6 + 1e-6 * y[56] * y[31])
    R44 = (13.7 * 1e-6 * y[56])/(130e-6 + 1e-6 * y[56])
    return (0) - (R18 + R44)
 
def m_r5p_c(t, y):
    R25 = (13.7 * 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])/(130e-6 + 1e-6 * y[10] * y[3] * y[23] * y[38] * y[5] * y[41] * y[46] * y[47] * y[49] * y[16] * y[39] * y[40] * y[14] * y[19] * y[25] * y[57])
    R30 = (13.7 * 1e-6 * y[57])/(130e-6 + 1e-6 * y[57])
    R41 = (13.7 * 1e-6 * y[57] * y[27])/(130e-6 + 1e-6 * y[57] * y[27])
    return (0) - (R25 + R30 + R41)
 
def m_pyr_e(t, y):
    R26 = (13.7 * 1e-6 * y[31] * y[58])/(130e-6 + 1e-6 * y[31] * y[58])
    R62 = (13.7 * 1e-6 * y[58])/(130e-6 + 1e-6 * y[58])
    return (0) - (R26 + R62)
 
def m_co2_e(t, y):
    R27 = (13.7 * 1e-6 * y[59])/(130e-6 + 1e-6 * y[59])
    R47 = (13.7 * 1000.0 * y[59])/(130e-6 + 1000.0 * y[59])
    return (0) - (R27 + R47)
 
def m_lac__D_e(t, y):
    R33 = (13.7 * 1e-6 * y[31] * y[60])/(130e-6 + 1e-6 * y[31] * y[60])
    R57 = (13.7 * 1e-6 * y[60])/(130e-6 + 1e-6 * y[60])
    return (0) - (R33 + R57)
 
def m_etoh_e(t, y):
    R36 = (13.7 * 1e-6 * y[61] * y[31])/(130e-6 + 1e-6 * y[61] * y[31])
    R48 = (13.7 * 1e-6 * y[61])/(130e-6 + 1e-6 * y[61])
    return (0) - (R36 + R48)
 
def m_for_e(t, y):
    R49 = (13.7 * 1e-6 * y[62])/(130e-6 + 1e-6 * y[62])
    R66 = (13.7 * 1e-6 * y[62] * y[31])/(130e-6 + 1e-6 * y[62] * y[31])
    R67 = (13.7 * 1e-6 * y[62])/(130e-6 + 1e-6 * y[62])
    return (0) - (R49 + R66 + R67)
 
def m_fru_e(t, y):
    R50 = (13.7 * 1e-6 * y[63])/(130e-6 + 1e-6 * y[63])
    R69 = (13.7 * 1e-6 * y[63] * y[19])/(130e-6 + 1e-6 * y[63] * y[19])
    return (0) - (R50 + R69)
 
def m_fum_e(t, y):
    R51 = (13.7 * 1e-6 * y[64])/(130e-6 + 1e-6 * y[64])
    R71 = (13.7 * 1e-6 * y[64] * y[31])/(130e-6 + 1e-6 * y[64] * y[31])
    return (0) - (R51 + R71)
 
def m_glc__D_e(t, y):
    R52 = (13.7 * 10.0 * y[65])/(130e-6 + 10.0 * y[65])
    R74 = (13.7 * 1e-6 * y[65] * y[19])/(130e-6 + 1e-6 * y[65] * y[19])
    return (0) - (R52 + R74)
 
def m_gln__L_e(t, y):
    R53 = (13.7 * 1e-6 * y[66])/(130e-6 + 1e-6 * y[66])
    R76 = (13.7 * 1e-6 * y[23] * y[66] * y[16])/(130e-6 + 1e-6 * y[23] * y[66] * y[16])
    return (0) - (R53 + R76)
 
def m_glu__L_e(t, y):
    R54 = (13.7 * 1e-6 * y[67])/(130e-6 + 1e-6 * y[67])
    R80 = (13.7 * 1e-6 * y[67] * y[31])/(130e-6 + 1e-6 * y[67] * y[31])
    return (0) - (R54 + R80)
 
def m_h2o_e(t, y):
    R56 = (13.7 * 1000.0 * y[68])/(130e-6 + 1000.0 * y[68])
    R82 = (13.7 * 1e-6 * y[68])/(130e-6 + 1e-6 * y[68])
    return (0) - (R56 + R82)
 
def m_mal__L_e(t, y):
    R58 = (13.7 * 1e-6 * y[69])/(130e-6 + 1e-6 * y[69])
    R87 = (13.7 * 1e-6 * y[31] * y[69])/(130e-6 + 1e-6 * y[31] * y[69])
    return (0) - (R58 + R87)
 
def m_nh4_e(t, y):
    R59 = (13.7 * 1000.0 * y[70])/(130e-6 + 1000.0 * y[70])
    R93 = (13.7 * 1e-6 * y[70])/(130e-6 + 1e-6 * y[70])
    return (0) - (R59 + R93)
 
def m_o2_e(t, y):
    R60 = (13.7 * 1000.0 * y[71])/(130e-6 + 1000.0 * y[71])
    R94 = (13.7 * 1e-6 * y[71])/(130e-6 + 1e-6 * y[71])
    return (0) - (R60 + R94)
 
def boundary_checker(y, boundary, type):
    '''
    Private function - called by ODE solvers to perform boundary checking 
    of variable values and reset them to specific values if the original 
    values fall out of the boundary values.
    
    Boundary parameter takes the form of a dictionary with variable number 
    as key and a list of [<boundary value>, <value to set if boundary is 
    exceeded>]. For example, the following dictionary for lower boundary 
    (type = 'lower') {'1': [0.0, 0.0], '5': [2.0, 2.0]} will set the lower 
    boundary of variable y[0] and [5] to 0.0 and 2.0 respectively. This 
    also allows for setting to a different value - for example, {'1': [0.0, 
    1.0]} will set variable y[0] to 2.0 if the original y[0] value is 
    negative.
    
    @param y: values for variables
    @type y: list
    @param boundary: set of values for boundary of variables
    @type boundary: dictionary
    @param type: the type of boundary to be checked, either 'upper' (upper 
    boundary) or 'lower' (lower boundary)
    '''
    for k in list(boundary.keys()):
        if y[int(k)] < boundary[k][0] and type == 'lower':
            y[int(k)] = boundary[k][1]
        if y[int(k)] > boundary[k][0] and type == 'upper':
            y[int(k)] = boundary[k][1]
    return y

def RK4(funcs, x0, y0, step, xmax, nonODEfunc=None,
        lower_bound=None, upper_bound=None,
        overflow=1e100, zerodivision=1e100):
    '''
    Generator to integrate a system of ODEs, y' = f(x, y), using fourth
    order Runge-Kutta method.
    
    A function (as nonODEfunc parameter) can be included to modify one or 
    more variables (y0 list). This function will not be an ODE (not a 
    dy/dt). This can be used to consolidate the modification of one or 
    more variables at each ODE solving step. For example, y[0] = y[1] / y[2] 
    can be written as 
    
    >>> def modifying_function(y, step):
            y[0] = y[1] / y[2]
            return y
    
    This function must take 'y' (variable list) and 'step' (time step) as 
    parameters and must return 'y' (the modified variable list). This 
    function will execute before boundary checking at each time step.
    
    Upper and lower boundaries of one or more variable can be set using 
    upper_bound and lower_bound parameters respectively. These parameters 
    takes the form of a dictionary with variable number as key and a list 
    of [<boundary value>, <value to set if boundary is exceeded>]. For 
    example, the following dictionary for lower boundary {'1': [0.0, 0.0], 
    '5': [2.0, 2.0]} will set the lower boundary of variable y[0] and y[5] 
    to 0.0 and 2.0 respectively. This also allows for setting to a different 
    value - for example, {'1': [0.0, 1.0]} will set variable y[0] to 2.0 if 
    the original y[0] value is negative.
    
    @param funcs: system of differential equations
    @type funcs: list
    @param x0: initial value of x-axis, which is usually starting time
    @type x0: float
    @param y0: initial values for variables
    @type y0: list
    @param step: step size on the x-axis (also known as step in calculus)
    @type step: float
    @param xmax: maximum value of x-axis, which is usually ending time
    @type xmax: float
    @param nonODEfunc: a function to modify the variable list (y0)
    @type nonODEfunc: function
    @param lower_bound: set of values for lower boundary of variables
    @type lower_bound: dictionary
    @param upper_bound: set of values for upper boundary of variables
    @type upper_bound: dictionary
    @param overflow: value (usually a large value) to assign in event of 
    over flow error (usually caused by a large number) during integration. 
    Default = 1e100.
    @type overflow: float
    @param zerodivision: value (usually a large value) to assign in event 
    of zero division error, which results in positive infinity, during 
    integration. Default = 1e100.
    @type zerodivision: float
    '''
    yield [x0] + y0
    def solver(funcs, x0, y0, step):
        n = len(funcs)
        f1, f2, f3, f4 = [0]*n, [0]*n, [0]*n, [0]*n
        y1 = [0]*n
        for i in range(n):
            try: f1[i] = funcs[i](x0, y0)
            except TypeError: pass
            except ZeroDivisionError: f1[i] = zerodivision
            except OverflowError: f1[i] = overflow
        for j in range(n):
            y1[j] = y0[j] + (0.5*step*f1[j])
        for i in range(n):
            try: f2[i] = funcs[i]((x0+(0.5*step)), y1)
            except TypeError: pass
            except ZeroDivisionError: f2[i] = zerodivision
            except OverflowError: f2[i] = overflow
        for j in range(n):
            y1[j] = y0[j] + (0.5*step*f2[j])
        for i in range(n):
            try: f3[i] = funcs[i]((x0+(0.5*step)), y1)
            except TypeError: pass
            except ZeroDivisionError: f3[i] = zerodivision
            except OverflowError: f3[i] = overflow
        for j in range(n):
            y1[j] = y0[j] + (step*f3[j])
        for i in range(n):
            try: f4[i] = funcs[i]((x0+step), y1)
            except TypeError: pass
            except ZeroDivisionError: f4[i] = zerodivision
            except OverflowError: f4[i] = overflow
        for i in range(n):
            try: y1[i] = y0[i] + (step * \
                    (f1[i] + (2.0*f2[i]) + (2.0*f3[i]) + f4[i]) / 6.0)
            except TypeError: pass
            except ZeroDivisionError: y1[i] = zerodivision
            except OverflowError: y1[i] = overflow
        return y1
    while x0 < xmax:
        y1 = solver(funcs, x0, y0, step)
        if nonODEfunc:
            y1 = nonODEfunc(y1, step)
        if lower_bound: 
            y1 = boundary_checker(y1, lower_bound, 'lower')
        if upper_bound: 
            y1 = boundary_checker(y1, upper_bound, 'upper')
        y0 = y1
        x0 = x0 + step
        yield [x0] + y0
        
ODE = list(range(72))
ODE[0] = m_adp_c
ODE[1] = m_fdp_c
ODE[2] = m_h_c
ODE[3] = m_accoa_c
ODE[4] = m_for_c
ODE[5] = m_f6p_c
ODE[6] = m_13dpg_c
ODE[7] = m_6pgc_c
ODE[8] = m_nadh_c
ODE[9] = m_akg_c
ODE[10] = m_3pg_c
ODE[11] = m_pi_c
ODE[12] = m_acald_c
ODE[13] = m_actp_c
ODE[14] = m_oaa_c
ODE[15] = m_acon_C_c
ODE[16] = m_h2o_c
ODE[17] = m_icit_c
ODE[18] = m_co2_c
ODE[19] = m_pep_c
ODE[20] = m_ac_c
ODE[21] = m_amp_c
ODE[22] = m_succoa_c
ODE[23] = m_atp_c
ODE[24] = m_coa_c
ODE[25] = m_pyr_c
ODE[26] = m_nadp_c
ODE[27] = m_xu5p__D_c
ODE[28] = m_cit_c
ODE[29] = m_ru5p__D_c
ODE[30] = m_succ_c
ODE[31] = m_h_e
ODE[32] = m_q8_c
ODE[33] = m_lac__D_c
ODE[34] = m_succ_e
ODE[35] = m_etoh_c
ODE[36] = m_fum_c
ODE[37] = m_q8h2_c
ODE[38] = m_e4p_c
ODE[39] = m_nad_c
ODE[40] = m_nadph_c
ODE[41] = m_g3p_c
ODE[42] = m_s7p_c
ODE[43] = m_dhap_c
ODE[44] = m_mal__L_c
ODE[45] = m_6pgl_c
ODE[46] = m_g6p_c
ODE[47] = m_gln__L_c
ODE[48] = m_nh4_c
ODE[49] = m_glu__L_c
ODE[50] = m_glx_c
ODE[51] = m_o2_c
ODE[52] = m_akg_e
ODE[53] = m_2pg_c
ODE[54] = m_pi_e
ODE[55] = m_acald_e
ODE[56] = m_ac_e
ODE[57] = m_r5p_c
ODE[58] = m_pyr_e
ODE[59] = m_co2_e
ODE[60] = m_lac__D_e
ODE[61] = m_etoh_e
ODE[62] = m_for_e
ODE[63] = m_fru_e
ODE[64] = m_fum_e
ODE[65] = m_glc__D_e
ODE[66] = m_gln__L_e
ODE[67] = m_glu__L_e
ODE[68] = m_h2o_e
ODE[69] = m_mal__L_e
ODE[70] = m_nh4_e
ODE[71] = m_o2_e
 
y = list(range(72))
y[0] = 1e-5    # m_adp_c : m_adp_c
y[1] = 1e-5    # m_fdp_c : m_fdp_c
y[2] = 1e-5    # m_h_c : m_h_c
y[3] = 1e-5    # m_accoa_c : m_accoa_c
y[4] = 1e-5    # m_for_c : m_for_c
y[5] = 1e-5    # m_f6p_c : m_f6p_c
y[6] = 1e-5    # m_13dpg_c : m_13dpg_c
y[7] = 1e-5    # m_6pgc_c : m_6pgc_c
y[8] = 1e-5    # m_nadh_c : m_nadh_c
y[9] = 1e-5    # m_akg_c : m_akg_c
y[10] = 1e-5    # m_3pg_c : m_3pg_c
y[11] = 1e-5    # m_pi_c : m_pi_c
y[12] = 1e-5    # m_acald_c : m_acald_c
y[13] = 1e-5    # m_actp_c : m_actp_c
y[14] = 1e-5    # m_oaa_c : m_oaa_c
y[15] = 1e-5    # m_acon_C_c : m_acon_C_c
y[16] = 1e-5    # m_h2o_c : m_h2o_c
y[17] = 1e-5    # m_icit_c : m_icit_c
y[18] = 1e-5    # m_co2_c : m_co2_c
y[19] = 1e-5    # m_pep_c : m_pep_c
y[20] = 1e-5    # m_ac_c : m_ac_c
y[21] = 1e-5    # m_amp_c : m_amp_c
y[22] = 1e-5    # m_succoa_c : m_succoa_c
y[23] = 1e-5    # m_atp_c : m_atp_c
y[24] = 1e-5    # m_coa_c : m_coa_c
y[25] = 1e-5    # m_pyr_c : m_pyr_c
y[26] = 1e-5    # m_nadp_c : m_nadp_c
y[27] = 1e-5    # m_xu5p__D_c : m_xu5p__D_c
y[28] = 1e-5    # m_cit_c : m_cit_c
y[29] = 1e-5    # m_ru5p__D_c : m_ru5p__D_c
y[30] = 1e-5    # m_succ_c : m_succ_c
y[31] = 1e-5    # m_h_e : m_h_e
y[32] = 1e-5    # m_q8_c : m_q8_c
y[33] = 1e-5    # m_lac__D_c : m_lac__D_c
y[34] = 1e-5    # m_succ_e : m_succ_e
y[35] = 1e-5    # m_etoh_c : m_etoh_c
y[36] = 1e-5    # m_fum_c : m_fum_c
y[37] = 1e-5    # m_q8h2_c : m_q8h2_c
y[38] = 1e-5    # m_e4p_c : m_e4p_c
y[39] = 1e-5    # m_nad_c : m_nad_c
y[40] = 1e-5    # m_nadph_c : m_nadph_c
y[41] = 1e-5    # m_g3p_c : m_g3p_c
y[42] = 1e-5    # m_s7p_c : m_s7p_c
y[43] = 1e-5    # m_dhap_c : m_dhap_c
y[44] = 1e-5    # m_mal__L_c : m_mal__L_c
y[45] = 1e-5    # m_6pgl_c : m_6pgl_c
y[46] = 1e-5    # m_g6p_c : m_g6p_c
y[47] = 1e-5    # m_gln__L_c : m_gln__L_c
y[48] = 1e-5    # m_nh4_c : m_nh4_c
y[49] = 1e-5    # m_glu__L_c : m_glu__L_c
y[50] = 1e-5    # m_glx_c : m_glx_c
y[51] = 1e-5    # m_o2_c : m_o2_c
y[52] = 1e-5    # m_akg_e : m_akg_e
y[53] = 1e-5    # m_2pg_c : m_2pg_c
y[54] = 1e-5    # m_pi_e : m_pi_e
y[55] = 1e-5    # m_acald_e : m_acald_e
y[56] = 1e-5    # m_ac_e : m_ac_e
y[57] = 1e-5    # m_r5p_c : m_r5p_c
y[58] = 1e-5    # m_pyr_e : m_pyr_e
y[59] = 1e-5    # m_co2_e : m_co2_e
y[60] = 1e-5    # m_lac__D_e : m_lac__D_e
y[61] = 1e-5    # m_etoh_e : m_etoh_e
y[62] = 1e-5    # m_for_e : m_for_e
y[63] = 1e-5    # m_fru_e : m_fru_e
y[64] = 1e-5    # m_fum_e : m_fum_e
y[65] = 1e-5    # m_glc__D_e : m_glc__D_e
y[66] = 1e-5    # m_gln__L_e : m_gln__L_e
y[67] = 1e-5    # m_glu__L_e : m_glu__L_e
y[68] = 1e-5    # m_h2o_e : m_h2o_e
y[69] = 1e-5    # m_mal__L_e : m_mal__L_e
y[70] = 1e-5    # m_nh4_e : m_nh4_e
y[71] = 1e-5    # m_o2_e : m_o2_e
 
labels = ['time', 'm_adp_c', 'm_fdp_c', 'm_h_c', 'm_accoa_c', 'm_for_c', 'm_f6p_c', 'm_13dpg_c', 'm_6pgc_c', 'm_nadh_c', 'm_akg_c', 'm_3pg_c', 'm_pi_c', 'm_acald_c', 'm_actp_c', 'm_oaa_c', 'm_acon_C_c', 'm_h2o_c', 'm_icit_c', 'm_co2_c', 'm_pep_c', 'm_ac_c', 'm_amp_c', 'm_succoa_c', 'm_atp_c', 'm_coa_c', 'm_pyr_c', 'm_nadp_c', 'm_xu5p__D_c', 'm_cit_c', 'm_ru5p__D_c', 'm_succ_c', 'm_h_e', 'm_q8_c', 'm_lac__D_c', 'm_succ_e', 'm_etoh_c', 'm_fum_c', 'm_q8h2_c', 'm_e4p_c', 'm_nad_c', 'm_nadph_c', 'm_g3p_c', 'm_s7p_c', 'm_dhap_c', 'm_mal__L_c', 'm_6pgl_c', 'm_g6p_c', 'm_gln__L_c', 'm_nh4_c', 'm_glu__L_c', 'm_glx_c', 'm_o2_c', 'm_akg_e', 'm_2pg_c', 'm_pi_e', 'm_acald_e', 'm_ac_e', 'm_r5p_c', 'm_pyr_e', 'm_co2_e', 'm_lac__D_e', 'm_etoh_e', 'm_for_e', 'm_fru_e', 'm_fum_e', 'm_glc__D_e', 'm_gln__L_e', 'm_glu__L_e', 'm_h2o_e', 'm_mal__L_e', 'm_nh4_e', 'm_o2_e']
 
lowerbound = {'0': [0.0, 0.0], '1': [0.0, 0.0], '2': [0.0, 0.0], '3': [0.0, 0.0], '4': [0.0, 0.0], '5': [0.0, 0.0], '6': [0.0, 0.0], '7': [0.0, 0.0], '8': [0.0, 0.0], '9': [0.0, 0.0], '10': [0.0, 0.0], '11': [0.0, 0.0], '12': [0.0, 0.0], '13': [0.0, 0.0], '14': [0.0, 0.0], '15': [0.0, 0.0], '16': [0.0, 0.0], '17': [0.0, 0.0], '18': [0.0, 0.0], '19': [0.0, 0.0], '20': [0.0, 0.0], '21': [0.0, 0.0], '22': [0.0, 0.0], '23': [0.0, 0.0], '24': [0.0, 0.0], '25': [0.0, 0.0], '26': [0.0, 0.0], '27': [0.0, 0.0], '28': [0.0, 0.0], '29': [0.0, 0.0], '30': [0.0, 0.0], '31': [0.0, 0.0], '32': [0.0, 0.0], '33': [0.0, 0.0], '34': [0.0, 0.0], '35': [0.0, 0.0], '36': [0.0, 0.0], '37': [0.0, 0.0], '38': [0.0, 0.0], '39': [0.0, 0.0], '40': [0.0, 0.0], '41': [0.0, 0.0], '42': [0.0, 0.0], '43': [0.0, 0.0], '44': [0.0, 0.0], '45': [0.0, 0.0], '46': [0.0, 0.0], '47': [0.0, 0.0], '48': [0.0, 0.0], '49': [0.0, 0.0], '50': [0.0, 0.0], '51': [0.0, 0.0], '52': [0.0, 0.0], '53': [0.0, 0.0], '54': [0.0, 0.0], '55': [0.0, 0.0], '56': [0.0, 0.0], '57': [0.0, 0.0], '58': [0.0, 0.0], '59': [0.0, 0.0], '60': [0.0, 0.0], '61': [0.0, 0.0], '62': [0.0, 0.0], '63': [0.0, 0.0], '64': [0.0, 0.0], '65': [0.0, 0.0], '66': [0.0, 0.0], '67': [0.0, 0.0], '68': [0.0, 0.0], '69': [0.0, 0.0], '70': [0.0, 0.0], '71': [0.0, 0.0], }
 
upperbound = {'0': [0.001, 0.001], '1': [0.001, 0.001], '2': [0.001, 0.001], '3': [0.001, 0.001], '4': [0.001, 0.001], '5': [0.001, 0.001], '6': [0.001, 0.001], '7': [0.001, 0.001], '8': [0.001, 0.001], '9': [0.001, 0.001], '10': [0.001, 0.001], '11': [0.001, 0.001], '12': [0.001, 0.001], '13': [0.001, 0.001], '14': [0.001, 0.001], '15': [0.001, 0.001], '16': [0.001, 0.001], '17': [0.001, 0.001], '18': [0.001, 0.001], '19': [0.001, 0.001], '20': [0.001, 0.001], '21': [0.001, 0.001], '22': [0.001, 0.001], '23': [0.001, 0.001], '24': [0.001, 0.001], '25': [0.001, 0.001], '26': [0.001, 0.001], '27': [0.001, 0.001], '28': [0.001, 0.001], '29': [0.001, 0.001], '30': [0.001, 0.001], '31': [0.001, 0.001], '32': [0.001, 0.001], '33': [0.001, 0.001], '34': [0.001, 0.001], '35': [0.001, 0.001], '36': [0.001, 0.001], '37': [0.001, 0.001], '38': [0.001, 0.001], '39': [0.001, 0.001], '40': [0.001, 0.001], '41': [0.001, 0.001], '42': [0.001, 0.001], '43': [0.001, 0.001], '44': [0.001, 0.001], '45': [0.001, 0.001], '46': [0.001, 0.001], '47': [0.001, 0.001], '48': [0.001, 0.001], '49': [0.001, 0.001], '50': [0.001, 0.001], '51': [0.001, 0.001], '52': [0.001, 0.001], '53': [0.001, 0.001], '54': [0.001, 0.001], '55': [0.001, 0.001], '56': [0.001, 0.001], '57': [0.001, 0.001], '58': [0.001, 0.001], '59': [0.001, 0.001], '60': [0.001, 0.001], '61': [0.001, 0.001], '62': [0.001, 0.001], '63': [0.001, 0.001], '64': [0.001, 0.001], '65': [0.001, 0.001], '66': [0.001, 0.001], '67': [0.001, 0.001], '68': [0.001, 0.001], '69': [0.001, 0.001], '70': [0.001, 0.001], '71': [0.001, 0.001], }
 
model = RK4(ODE, 0.0, y, 1, 21600, None, lowerbound, upperbound)
